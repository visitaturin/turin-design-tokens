name: Deploy

on:
  push:
    branches:
      - 'master'
      - 'main'
      - 'next'
      - 'hotfix'
      - 'alpha'
      - 'beta'
      - 'validation'
      - 'transform'
jobs:
  deploy:
    runs-on: ubuntu-20.04
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup git
        uses: oleksiyrudenko/gha-git-credentials@v2.1
        with:
          token: '${{ secrets.GH_TOKEN }}'
          name: '${{ secrets.GH_USER }}'
          email: '${{ secrets.GH_USER_EMAIL }}'
      
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # - name: Setup git keys
      #   run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf ssh://git@github.com/

      - name: Install dependencies
        run: yarn install

      - name: Build app
        run: yarn build

      - name: Semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: yarn semantic-release

      # - name: Get version
      #   id: version
      #   run: echo "##[set-output name=NEW_VERSION;]$(node -p "require('./package.json').version")"

      # - name: Publish to S3
      #   run: |
      #     aws s3 sync ./output s3://turin/turin-design-tokens/${{ steps.version.outputs.NEW_VERSION }}
      #     aws s3 sync ./output s3://turin/turin-design-tokens/${GITHUB_REF##*/}
